import numpy as np
import pandas as pd
import matplotlib.pyplot as plt

# 1. Introduction to NumPy and ndarray
# a) Create a 2D NumPy array (3x3) with float64 elements
array1 = np.array([[1.2, 2.3, 3.4], [4.5, 5.6, 6.7], [7.8, 8.9, 9.0]], dtype=np.float64)

# b) Element-wise addition with scalar 10
array_add = array1 + 10

# c) Element-wise multiplication with another 3x3 NumPy array
array2 = np.array([[2.0, 3.0, 4.0], [5.0, 6.0, 7.0], [8.0, 9.0, 10.0]], dtype=np.float64)
array_mul = array1 * array2

# d) Print dtype, shape, and size of the result arrays
print("Array after addition:", array_add)
print("Dtype:", array_add.dtype, "Shape:", array_add.shape, "Size:", array_add.size)
print("Array after multiplication:", array_mul)
print("Dtype:", array_mul.dtype, "Shape:", array_mul.shape, "Size:", array_mul.size)

# 2. Data Cleaning and Missing Values Handling
# a) Create a DataFrame with missing values
data = {
    "Name": ["Alice", "Bob", "Charlie", "David"],
    "Age": [25, np.nan, 30, 35],
    "Salary": [50000, 60000, np.nan, 80000]
}
df = pd.DataFrame(data)

# b) Identify missing values using isna()
print("Missing values:")
print(df.isna())

# c) Drop rows with any missing data
df_dropped = df.dropna()
print("DataFrame after dropping missing values:")
print(df_dropped)

# d) Fill missing values with a specified value (mean for Age, 0 for Salary)
df_filled = df.copy()
df_filled["Age"].fillna(df["Age"].mean(), inplace=True)
df_filled["Salary"].fillna(0, inplace=True)
print("DataFrame after filling missing values:")
print(df_filled)

# 3. Matplotlib Visualisation
# a) Create a simple line plot
time = np.arange(1, 11)  # X-axis (time steps)
values = np.random.randint(10, 100, 10)  # Random values for Y-axis
plt.figure(figsize=(8, 4))
plt.plot(time, values, color='blue', marker='o', linewidth=2, linestyle='--')
plt.xlabel("Time")
plt.ylabel("Value")
plt.title("Value Change Over Time")
plt.show()

# d) Create a scatter plot
age = np.random.randint(20, 60, 20)
income = np.random.randint(20000, 100000, 20)
plt.figure(figsize=(8, 4))
plt.scatter(age, income, color='red', alpha=0.6)
plt.xlabel("Age")
plt.ylabel("Income")
plt.title("Age vs Income")
plt.show()
